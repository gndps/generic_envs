copy_ssh_keys() {
    if [[ -z "$1" ]]; then
        echo "Error: must provide ssh hostname as argument"
        return 1
    fi
    local ssh_host=$1

    # TBD Find username from .ssh/config
    local username=$(whoami)

    # List of SSH key files
    files=( "id_rsa" "id_rsa.pub" "activessh" "archive" )

    # Local and remote paths
    local_path="$HOME/.ssh/"
    remote_path=".ssh/"
    ssh_destination="${username}@${ssh_host}"

    # Function to copy a single file using rsync
    copy_file() {
        local file=$1
        local local_file="$local_path$file"
        if [[ ! -e "$local_file" ]]; then
            echo "Skipping $local_file as it does not exist"
            return
        fi
        
        # Copy the file to the remote machine using rsync
        echo "Copying $local_file to $ssh_destination:$remote_path$file..."
        rsync -az "$local_file" "$ssh_destination:$remote_path$file"
    }

    # Loop through each file and copy it to the remote machine in background
    for file in "${files[@]}"; do
        copy_file "$file" &
    done

    # Wait for all background jobs to complete
    wait

    echo "Keys copied and permissions set successfully on $ssh_host"
}

sshinit() {
    local ssh_host="$1"
    local previous_ssh
    local default_ssh_profile="${default_ssh_profile:-gndps}"

    if [[ -z "$ssh_host" || ! -d "$HOME/.ssh/archive/$default_ssh_profile" ]]; then
        copy_ssh_keys $ssh_host
    else
        # Store the name of the previously active SSH environment
        if [[ -e "$HOME/.ssh/activessh" ]]; then
            previous_ssh=$(cat "$HOME/.ssh/activessh")
        fi

        # Activate the new SSH environment
        sshenv activate "$default_ssh_profile"

        # Perform the copy operation
        copy_ssh_keys "$ssh_host"

        # Recover the previously active SSH environment
        if [[ -n "$previous_ssh" ]]; then
            sshenv activate "$previous_ssh"
        fi
    fi
}

# Usage:
# sshinit hostname