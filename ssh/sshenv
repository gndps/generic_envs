#!/bin/bash

# Directory for archiving SSH keys
ARCHIVE_DIR="$HOME/.ssh/archive"

# Help function
sshenv_help() {
    echo "sshenv list"
    echo "======================"
    sshenv list
    echo "======================"
    echo
    echo "Usage: sshenv.sh [command] [arguments]"
    echo "Commands:"
    echo "  init [profile_name]     Initialize a new sshenv profile (using ~/.ssh/id_rsa, id_rsa.pub) and activate it"
    echo "  activate [profile_name] Activate SSH key-pair from the archive"
    echo "  list                    List all archived sshenv profiles"
    echo "  delete                  Delete the current sshenv profile (it does not delete ~/.ssh/id_rsa, id_rsa.pub)"
    echo "  switch                  Switch to the next sshenv profile"
}

# Function to initialize a new SSH key-pair profile and activate it
sshenv_init() {
    local profile_name=$1
    local target_dir="$ARCHIVE_DIR/$profile_name"

    # Create the archive directory if it doesn't exist
    mkdir -p "$target_dir"

    # Copy the current SSH key-pair to the archive
    cp ~/.ssh/id_rsa ~/.ssh/id_rsa.pub "$target_dir"

    # Create the activessh file in the archive
    echo "$profile_name" > "$target_dir/activessh"

    # Automatically activate the just-initiated profile
    sshenv_activate "$profile_name"
}

# Function to activate an SSH key-pair from the archive
sshenv_activate() {
    local profile_name=$1
    local source_dir="$ARCHIVE_DIR/$profile_name"

    if [[ -d "$source_dir" ]]; then
        # Copy the SSH key-pair from the archive to the default location
        cp "$source_dir/id_rsa" "$source_dir/id_rsa.pub" ~/.ssh

        # Update the activessh file in the home directory
        echo "$profile_name" > ~/.ssh/activessh
        # Display the list of profiles after activation
        sshenv_list
    else
        echo "Error: Archive $profile_name does not exist."
    fi
}

# Function to list all archived SSH key-pairs
sshenv_list() {
    if [[ -d "$ARCHIVE_DIR" ]]; then
        local current_ssh=$(cat ~/.ssh/activessh 2>/dev/null)
        for dir in "$ARCHIVE_DIR"/*/; do
            dir=${dir%*/}
            dir=${dir##*/}
            if [[ -f "$ARCHIVE_DIR/$dir/activessh" ]]; then
                if [[ "$dir" == "$current_ssh" ]]; then
                    echo "* $dir"
                else
                    echo "  $dir"
                fi
            fi
        done
    else
        echo "No archived SSH key-pairs found."
    fi
}

# Function to delete the current SSH key-pair
sshenv_delete() {
    rm -f ~/.ssh/id_rsa ~/.ssh/id_rsa.pub ~/.ssh/activessh
    echo "Current SSH key-pair and activessh have been deleted from ~/.ssh"
}

# Function to switch to the next SSH key-pair in the list
sshenv_switch() {
    if [[ -d "$ARCHIVE_DIR" ]]; then
        local current_ssh=$(cat ~/.ssh/activessh 2>/dev/null)
        local ssh_keys=()
        for dir in "$ARCHIVE_DIR"/*/; do
            dir=${dir%*/}
            dir=${dir##*/}
            if [[ -f "$ARCHIVE_DIR/$dir/activessh" ]]; then
                ssh_keys+=("$dir")
            fi
        done
        if [[ ${#ssh_keys[@]} -eq 0 ]]; then
            echo "No archived SSH key-pairs found."
            return
        fi
        if [[ -z "$current_ssh" ]]; then
            sshenv_activate "${ssh_keys[0]}"
        else
            for i in "${!ssh_keys[@]}"; do
                if [[ "${ssh_keys[$i]}" == "$current_ssh" ]]; then
                    next_index=$(( (i + 1) % ${#ssh_keys[@]} ))
                    sshenv_activate "${ssh_keys[$next_index]}"
                    return
                fi
            done
        fi
    else
        echo "No archived SSH key-pairs found."
    fi
}

sshenv() {
    # Main script logic
    case "$1" in
        init)
            if [[ -n "$2" ]]; then
                sshenv_init "$2"
            else
                echo "Error: Profile name is required."
                sshenv_help
            fi
            ;;
        activate)
            if [[ -n "$2" ]]; then
                sshenv_activate "$2"
            else
                echo "Error: Profile name is required."
                sshenv_help
            fi
            ;;
        list)
            sshenv_list
            ;;
        delete)
            sshenv_delete
            ;;
        switch)
            sshenv_switch
            ;;
        *)
            sshenv_help
            ;;
    esac
}

alias sss="sshenv switch"